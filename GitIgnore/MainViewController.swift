//
//  ViewController.swift
//  GitIgnore
//
//  Created by Joshua Barrow on 1/27/15.
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this
//  software and associated documentation files (the "Software"), to deal in the Software
//  without restriction, including without limitation the rights to use, copy, modify, merge,
//  publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
//  to whom the Software is furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all copies or 
//  substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
//  BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
//  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
//  OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
//  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

import Cocoa

class MainViewController: NSViewController {

    /// The NSTextField that the user types the search parameters into
    @IBOutlet weak var textField: NSTextField!
    
    /// The NSButton to start the download / viewing process for the .gitignore file
    @IBOutlet weak var createButton: NSButton!

    /// Activity indicator for when network activity is taking place
    @IBOutlet weak var progressIndicator: NSProgressIndicator!

    /// Holder variable that is used to transport the gitignore data to the ViewGitIgnoreViewController
    var gitIgnoreFileData : NSData?
    
    override func viewDidLoad()
    {
        super.viewDidLoad()

        self.textField.placeholderString = Strings.TextFieldPlaceholder
        self.textField.toolTip = Strings.TextFieldTooltip
        self.textField.target = self
        self.textField.action = Selector("performRequest:")
        
        self.createButton.toolTip = Strings.ButtonTooltip
    }

    override func prepareForSegue(segue: NSStoryboardSegue, sender: AnyObject?)
    {
        if segue.identifier == Segues.ShowGitIgnoreFile {
            let destinationViewController = segue.destinationController as ViewGitIgnoreViewController
            
            destinationViewController.gitIgnoreFileData = self.gitIgnoreFileData
        }
    }
    
    /**
    Performs the URL request that downloads the gitignore that has been
    generated by the backend.
    
    :param: sender The caller of this method
    */
    @IBAction func performRequest(sender: NSButton)
    {
        var urlString = createEndPoint()
        
        if countElements(urlString) > 0 {
            createButton.hidden = true
            progressIndicator.hidden = false
            progressIndicator.startAnimation(self)
            
            let url = NSURL(string: urlString)
            let request = NSURLRequest(URL: url!)
            let session = NSURLSession.sharedSession()
            
            var task = session.dataTaskWithRequest(request, completionHandler: { data, response, error in
                if !(error != nil) {
                    dispatch_async(dispatch_get_main_queue()) {
                        self.saveOrView(data, downloadError: error)
                    }
                }
            })
            
            task.resume()
        }
    }
    
    /**
    Allows the user to choose what to do with the .gitignore file.
    
    :param: gitIgnoreFile The data representation of the gitignore file
    :param: downloadError The possible error from the download operation.  May be nil.
    */
    func saveOrView(gitIgnoreFile: NSData?, downloadError: NSError!)
    {
        createButton.hidden = false
        progressIndicator.hidden = true
        progressIndicator.stopAnimation(self)
        
        if let error = downloadError {
            NSAlert(error: downloadError).beginSheetModalForWindow(self.view.window!, completionHandler: nil)
        }
        
        var alert = NSAlert()
        
        alert.messageText = Strings.SaveOrViewTitle
        alert.informativeText = Strings.SaveOrViewInformativeText
        alert.alertStyle = .InformationalAlertStyle
        alert.addButtonWithTitle(Strings.Save)
        alert.addButtonWithTitle(Strings.View)
        alert.addButtonWithTitle(Strings.Cancel)
        
        alert.beginSheetModalForWindow(self.view.window!, completionHandler: { response in
            if response == NSAlertFirstButtonReturn {
                self.saveFile(gitIgnoreFile)
            }
            else if response == NSAlertSecondButtonReturn {
                self.showGitIgnore(gitIgnoreFile)
            }
            else {
                return
            }
        })
    }
    
    /**
    Shows the NSSavePanel and saves the file to the given folder
    
    :param: gitIgnoreFile The data returned from the backend
    */
    func saveFile(gitIgnoreFile: NSData?)
    {
        var savePanel = NSSavePanel()
        savePanel.nameFieldStringValue = Strings.FileName
        
        savePanel.beginWithCompletionHandler { (result: Int) -> Void in
            if result == NSFileHandlingPanelOKButton {
                let exportedFileURL = savePanel.URL
                
                gitIgnoreFile?.writeToURL(exportedFileURL!, atomically: true)
            }
        }
    }
    
    /**
    Show the .gitignore file in the ViewGitIgnoreViewController
    
    :param: gitIgnoreFile The data returned from the backend
    */
    func showGitIgnore(gitIgnoreFile: NSData?)
    {
        self.gitIgnoreFileData = gitIgnoreFile
        
        performSegueWithIdentifier(Segues.ShowGitIgnoreFile, sender: self)
    }
    
    /**
    Helper method to create the endpoint from the user inputted string
    
    :returns: The String object representation of the full URL endopint
    */
    func createEndPoint() -> String
    {
        var returnValue = String()
        
        if countElements(textField.stringValue) > 0 {
            let elementArray = textField.stringValue.componentsSeparatedByCharactersInSet(NSCharacterSet.whitespaceCharacterSet())
            
            var endPoint = String()
            
            for searchTerm in elementArray {
                endPoint = endPoint.stringByAppendingFormat("%@,", searchTerm)
            }
            
            let finalEndpoint = endPoint.substringToIndex(advance(endPoint.startIndex, (countElements(endPoint) - 1)))
            
            returnValue = Url.BaseUrl + finalEndpoint
        }
        
        return returnValue
    }
}

